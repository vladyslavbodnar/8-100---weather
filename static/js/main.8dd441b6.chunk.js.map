{"version":3,"sources":["components/Navbar.js","components/Settings.js","components/SearchBar.js","components/Weather.js","App.js","index.js"],"names":["Navbar","to","Settings","useEffect","document","title","history","useHistory","useContext","StateContext","state","dispatch","value","temperatureUnit","onChange","e","type","target","savedLocations","length","map","location","className","onClick","payload","push","split","join","SearchBar","cities","useState","inputValue","setInputValue","citiesValue","setCitiesValue","setLocation","key","citiesValues","filter","city","name","startsWith","changeInput","onKeyDown","countryCode","API_KEY","Weather","locationWeather","setLocationWeather","isSaved","setIsSaved","statusText","setStatusText","useMemo","City","getAllCities","currentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","data","url","fetch","then","response","ok","json","fetchWeather","emoji","list","weather","main","some","country","description","Math","round","temp","humidity","style","transform","wind","deg","speed","Date","sunrise","getHours","getMinutes","sunset","getDate","getMonth","React","createContext","initialState","reducer","action","Error","App","useReducer","Provider","path","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8dd441b6.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n    return (\n        <div>\n            <Link to=\"/\">Weather</Link>\n            <Link to=\"/settings\">Settings</Link>\n        </div>\n    );\n};\n\nexport default Navbar;\n","import { useContext, useEffect } from \"react\";\nimport { StateContext } from \"../App\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Settings = () => {\n    useEffect(() => {\n        document.title = \"Settings\";\n    }, []);\n\n    let history = useHistory();\n\n    const [state, dispatch] = useContext(StateContext);\n\n    const getWeather = (city) => {\n        dispatch({ type: \"setLocation\", payload: city });\n        history.push(\"/\");\n    };\n\n    return (\n        <div>\n            <div>\n                Temperature Unit:\n                <select value={state.temperatureUnit} onChange={(e) => dispatch({ type: e.target.value })}>\n                    <option value=\"c\">Celsius</option>\n                    <option value=\"f\">Fahrenheit</option>\n                    <option value=\"k\">Kelvin</option>\n                </select>\n            </div>\n            <div>\n                <h2>Saved Locations</h2>\n                {state.savedLocations.length > 0 ? (\n                    state.savedLocations.map((location) => (\n                        <div key={location}>\n                            <a className=\"Settings__city-name\" onClick={() => getWeather(location)}>\n                                {location.split(\",\").join(\", \")}\n                            </a>\n                            <button onClick={() => dispatch({ type: \"removeLocation\", payload: location })}>\n                                <DeleteIcon />\n                            </button>\n                        </div>\n                    ))\n                ) : (\n                    <p>Empty :c</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Settings;\n","import { useContext, useState } from \"react\";\nimport { StateContext } from \"../App\";\n\nconst SearchBar = ({ cities }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [citiesValue, setCitiesValue] = useState([]);\n\n    const [state, dispatch] = useContext(StateContext);\n\n    const setLocation = (e) => {\n        if (e.key === \"Enter\") {\n            dispatch({ type: \"setLocation\", payload: e.target.value });\n            setInputValue(\"\");\n            setCitiesValue([]);\n        }\n    };\n\n    const changeInput = (e) => {\n        setInputValue(e.target.value);\n\n        if (e.target.value === \"\") {\n            setCitiesValue([]);\n            return;\n        }\n\n        const citiesValues = cities.filter((city) => city.name.startsWith(e.target.value));\n        setCitiesValue(citiesValues);\n    };\n\n    return (\n        <div>\n            <input type=\"text\" value={inputValue} onChange={(e) => changeInput(e)} onKeyDown={(e) => setLocation(e)} />\n            {citiesValue.map((city) => (\n                <h3 onClick={() => setLocation({ key: \"Enter\", target: { value: `${city.name},${city.countryCode}` } })}>\n                    {city.name}, {city.countryCode}\n                </h3>\n            ))}\n        </div>\n    );\n};\n\nexport default SearchBar;\n","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport { StateContext } from \"../App\";\nimport SearchBar from \"./SearchBar\";\n\n// material icons\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport CallMadeIcon from \"@material-ui/icons/CallMade\";\n\n// cities db\nimport { City } from \"country-state-city\";\n\nconst API_KEY = \"cc4ab46be8c995ffafc858ed7cd26383\";\n\nconst Weather = () => {\n    const [state, dispatch] = useContext(StateContext);\n    const [locationWeather, setLocationWeather] = useState(null);\n    const [isSaved, setIsSaved] = useState(null);\n    const [statusText, setStatusText] = useState(\"\");\n    const cities = useMemo(() => City.getAllCities(), []);\n\n    const fetchWeather = (data) => {\n        setStatusText(\"Searching..\");\n\n        let url = \"\";\n\n        // get temperature unit\n        let temperatureUnit;\n        switch (state.temperatureUnit) {\n            case \"c\":\n                temperatureUnit = \"metric\";\n                break;\n            case \"f\":\n                temperatureUnit = \"imperial\";\n                break;\n            case \"k\":\n                temperatureUnit = \"standard\";\n                break;\n\n            default:\n                break;\n        }\n\n        // check type of location (coordinates or name) and set an url\n        if (typeof data === \"object\") {\n            url = `https://api.openweathermap.org/data/2.5/forecast?lat=${data.latitude}&lon=${data.longitude}&units=${temperatureUnit}&appid=${API_KEY}`;\n        }\n        if (typeof data === \"string\") {\n            url = `https://api.openweathermap.org/data/2.5/forecast?q=${data}&units=${temperatureUnit}&APPID=${API_KEY}`;\n        }\n\n        // set location data\n        fetch(url)\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    setStatusText(\"Location not found\");\n                }\n            })\n            .then((json) => setLocationWeather(json));\n    };\n\n    useEffect(() => {\n        // change title\n        document.title = \"Weather\";\n\n        if (state.currentLocation) {\n            return;\n        }\n\n        // get current location if user allowed and fetch weather\n        function geoFindMe() {\n            function success(position) {\n                const latitude = position.coords.latitude;\n                const longitude = position.coords.longitude;\n                dispatch({ type: \"setLocation\", payload: { latitude, longitude } });\n            }\n\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(success);\n            }\n        }\n        geoFindMe();\n    }, []);\n\n    useEffect(() => {\n        // fetch weather on change location or on load\n        if (state.currentLocation) {\n            fetchWeather(state.currentLocation);\n        }\n    }, [state.currentLocation]);\n\n    useEffect(() => {\n        // dynamic title\n        if (locationWeather) {\n            let emoji;\n            switch (locationWeather.list[0].weather[0].main) {\n                case \"Rain\":\n                    emoji = \"🌧️\";\n                    break;\n                case \"Snow\":\n                    emoji = \"❄️\";\n                    break;\n                case \"Thunderstorm\":\n                    emoji = \"🌩️\";\n                    break;\n                case \"Thunderstorm\":\n                    emoji = \"\";\n                    break;\n                case \"Drizzle\":\n                    emoji = \"🌧️\";\n                    break;\n                case \"Clouds\":\n                    emoji = \"☁️\";\n                    break;\n                case \"Clear\":\n                    // idk if this is a rigth emoji\n                    emoji = \"☀️\";\n                    break;\n                default:\n                    emoji = \"\";\n                    break;\n            }\n            document.title = `${locationWeather.city.name} ${emoji} - Weather`;\n        }\n\n        // check if the location is already saved\n        if (state?.savedLocations?.some((location) => location === `${locationWeather?.city?.name},${locationWeather?.city?.country}`)) {\n            setIsSaved(true);\n        } else {\n            setIsSaved(false);\n        }\n    }, [locationWeather]);\n\n    useEffect(() => {\n        // check if the location is already saved\n        if (state?.savedLocations?.some((location) => location === `${locationWeather?.city?.name},${locationWeather?.city?.country}`)) {\n            setIsSaved(true);\n        } else {\n            setIsSaved(false);\n        }\n    }, [state]);\n\n    const saveUnsaveLocation = () => {\n        if (!isSaved) {\n            dispatch({ type: \"saveLocation\", payload: `${locationWeather.city.name},${locationWeather.city.country}` });\n        }\n        if (isSaved) {\n            dispatch({ type: \"removeLocation\", payload: `${locationWeather.city.name},${locationWeather.city.country}` });\n        }\n    };\n\n    return (\n        <div>\n            <SearchBar cities={cities} />\n            {locationWeather ? (\n                <div>\n                    <h2>\n                        {locationWeather.city.name}, {locationWeather.city.country}\n                    </h2>\n                    <div>\n                        {/* main weather */}\n                        <p>{locationWeather.list[0].weather[0].description}</p>\n                        <button onClick={() => saveUnsaveLocation()}>{isSaved ? <FavoriteIcon /> : <FavoriteBorderIcon />}</button>\n                        <p>\n                            {Math.round(locationWeather.list[0].main.temp)}°{state.temperatureUnit}\n                        </p>\n                        <p>Humidity: {locationWeather.list[0].main.humidity}%</p>\n                        <p>\n                            <CallMadeIcon\n                                style={{\n                                    transform: `rotate(${locationWeather.list[0].wind.deg - 45}deg)`,\n                                }}\n                            />\n                            {locationWeather.list[0].wind.speed}\n                            {state.temperatureUnit === \"c\" && \"meter/sec\"}\n                            {state.temperatureUnit === \"f\" && \"miles/hour\"}\n                            {state.temperatureUnit === \"k\" && \"meter/sec\"}\n                        </p>\n\n                        <p>{locationWeather.list[0][\"dx_txt\"]}</p>\n\n                        <h3>\n                            Sunrise: {new Date(locationWeather.city.sunrise * 1000).getHours()}:\n                            {new Date(locationWeather.city.sunrise * 1000).getMinutes()}\n                        </h3>\n                        <h3>\n                            Sunset: {new Date(locationWeather.city.sunset * 1000).getHours()}:\n                            {new Date(locationWeather.city.sunset * 1000).getMinutes()}\n                        </h3>\n                    </div>\n\n                    <div className=\"Weather__future-predictions\">\n                        {locationWeather &&\n                            locationWeather.list.map((data) => {\n                                // return on current weather\n                                if (data === locationWeather.list[0]) return;\n\n                                return (\n                                    <div>\n                                        <p>\n                                            {new Date(data[\"dt_txt\"]).getHours() === 0 ? (\n                                                <p>\n                                                    {new Date(data[\"dt_txt\"]).getDate()}/{new Date(data[\"dt_txt\"]).getMonth() + 1}\n                                                </p>\n                                            ) : (\n                                                <p>{new Date(data[\"dt_txt\"]).getHours()}:00</p>\n                                            )}\n                                        </p>\n                                        <img />\n                                        <p>Here must be an icon {data.weather[0].main}</p>\n\n                                        <p>\n                                            {data.main.temp}°{state.temperatureUnit}\n                                        </p>\n                                        <p>\n                                            <CallMadeIcon\n                                                style={{\n                                                    transform: `rotate(${data.wind.deg - 45}deg)`,\n                                                }}\n                                            />\n                                            {data.wind.speed}\n                                            {state.temperatureUnit === \"c\" && \"meter/sec\"}\n                                            {state.temperatureUnit === \"f\" && \"miles/hour\"}\n                                            {state.temperatureUnit === \"k\" && \"meter/sec\"}\n                                        </p>\n                                    </div>\n                                );\n                            })}\n                    </div>\n                </div>\n            ) : (\n                <p>{statusText}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Weather;\n","import React, { useReducer } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Settings from \"./components/Settings\";\nimport Weather from \"./components/Weather\";\n\nexport const StateContext = React.createContext();\n\nconst initialState = { temperatureUnit: \"c\", currentLocation: null, savedLocations: [] };\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        // temperature units\n        case \"c\":\n            return { ...state, temperatureUnit: \"c\" };\n        case \"f\":\n            return { ...state, temperatureUnit: \"f\" };\n        case \"k\":\n            return { ...state, temperatureUnit: \"k\" };\n        // change current location\n        case \"setLocation\":\n            return { ...state, currentLocation: action.payload };\n        // saved locations\n        case \"saveLocation\":\n            // check if it is already saved\n            if (state.savedLocations.some((location) => location === action.payload)) return state;\n\n            return { ...state, savedLocations: [...state.savedLocations, action.payload] };\n        case \"removeLocation\":\n            return { ...state, savedLocations: state.savedLocations.filter((location) => location !== action.payload) };\n        default:\n            throw new Error();\n    }\n}\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <StateContext.Provider value={[state, dispatch]}>\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <Weather />\n                        </Route>\n                        <Route path=\"/settings\">\n                            <Settings />\n                        </Route>\n                    </Switch>\n                    <Navbar />\n                </Router>\n            </div>\n        </StateContext.Provider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}